/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectAnalyticsJobLister helps list ObjectAnalyticsJobs.
// All objects returned here must be treated as read-only.
type ObjectAnalyticsJobLister interface {
	// List lists all ObjectAnalyticsJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectAnalyticsJob, err error)
	// ObjectAnalyticsJobs returns an object that can list and get ObjectAnalyticsJobs.
	ObjectAnalyticsJobs(namespace string) ObjectAnalyticsJobNamespaceLister
	ObjectAnalyticsJobListerExpansion
}

// objectAnalyticsJobLister implements the ObjectAnalyticsJobLister interface.
type objectAnalyticsJobLister struct {
	indexer cache.Indexer
}

// NewObjectAnalyticsJobLister returns a new ObjectAnalyticsJobLister.
func NewObjectAnalyticsJobLister(indexer cache.Indexer) ObjectAnalyticsJobLister {
	return &objectAnalyticsJobLister{indexer: indexer}
}

// List lists all ObjectAnalyticsJobs in the indexer.
func (s *objectAnalyticsJobLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectAnalyticsJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectAnalyticsJob))
	})
	return ret, err
}

// ObjectAnalyticsJobs returns an object that can list and get ObjectAnalyticsJobs.
func (s *objectAnalyticsJobLister) ObjectAnalyticsJobs(namespace string) ObjectAnalyticsJobNamespaceLister {
	return objectAnalyticsJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectAnalyticsJobNamespaceLister helps list and get ObjectAnalyticsJobs.
// All objects returned here must be treated as read-only.
type ObjectAnalyticsJobNamespaceLister interface {
	// List lists all ObjectAnalyticsJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectAnalyticsJob, err error)
	// Get retrieves the ObjectAnalyticsJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectAnalyticsJob, error)
	ObjectAnalyticsJobNamespaceListerExpansion
}

// objectAnalyticsJobNamespaceLister implements the ObjectAnalyticsJobNamespaceLister
// interface.
type objectAnalyticsJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectAnalyticsJobs in the indexer for a given namespace.
func (s objectAnalyticsJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectAnalyticsJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectAnalyticsJob))
	})
	return ret, err
}

// Get retrieves the ObjectAnalyticsJob from the indexer for a given namespace and name.
func (s objectAnalyticsJobNamespaceLister) Get(name string) (*v1alpha1.ObjectAnalyticsJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectanalyticsjob"), name)
	}
	return obj.(*v1alpha1.ObjectAnalyticsJob), nil
}
