/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectQueryJobLister helps list ObjectQueryJobs.
// All objects returned here must be treated as read-only.
type ObjectQueryJobLister interface {
	// List lists all ObjectQueryJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectQueryJob, err error)
	// ObjectQueryJobs returns an object that can list and get ObjectQueryJobs.
	ObjectQueryJobs(namespace string) ObjectQueryJobNamespaceLister
	ObjectQueryJobListerExpansion
}

// objectQueryJobLister implements the ObjectQueryJobLister interface.
type objectQueryJobLister struct {
	indexer cache.Indexer
}

// NewObjectQueryJobLister returns a new ObjectQueryJobLister.
func NewObjectQueryJobLister(indexer cache.Indexer) ObjectQueryJobLister {
	return &objectQueryJobLister{indexer: indexer}
}

// List lists all ObjectQueryJobs in the indexer.
func (s *objectQueryJobLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectQueryJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectQueryJob))
	})
	return ret, err
}

// ObjectQueryJobs returns an object that can list and get ObjectQueryJobs.
func (s *objectQueryJobLister) ObjectQueryJobs(namespace string) ObjectQueryJobNamespaceLister {
	return objectQueryJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectQueryJobNamespaceLister helps list and get ObjectQueryJobs.
// All objects returned here must be treated as read-only.
type ObjectQueryJobNamespaceLister interface {
	// List lists all ObjectQueryJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectQueryJob, err error)
	// Get retrieves the ObjectQueryJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectQueryJob, error)
	ObjectQueryJobNamespaceListerExpansion
}

// objectQueryJobNamespaceLister implements the ObjectQueryJobNamespaceLister
// interface.
type objectQueryJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectQueryJobs in the indexer for a given namespace.
func (s objectQueryJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectQueryJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectQueryJob))
	})
	return ret, err
}

// Get retrieves the ObjectQueryJob from the indexer for a given namespace and name.
func (s objectQueryJobNamespaceLister) Get(name string) (*v1alpha1.ObjectQueryJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectqueryjob"), name)
	}
	return obj.(*v1alpha1.ObjectQueryJob), nil
}
