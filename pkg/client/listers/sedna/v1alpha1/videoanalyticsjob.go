/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VideoAnalyticsJobLister helps list VideoAnalyticsJobs.
// All objects returned here must be treated as read-only.
type VideoAnalyticsJobLister interface {
	// List lists all VideoAnalyticsJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VideoAnalyticsJob, err error)
	// VideoAnalyticsJobs returns an object that can list and get VideoAnalyticsJobs.
	VideoAnalyticsJobs(namespace string) VideoAnalyticsJobNamespaceLister
	VideoAnalyticsJobListerExpansion
}

// videoAnalyticsJobLister implements the VideoAnalyticsJobLister interface.
type videoAnalyticsJobLister struct {
	indexer cache.Indexer
}

// NewVideoAnalyticsJobLister returns a new VideoAnalyticsJobLister.
func NewVideoAnalyticsJobLister(indexer cache.Indexer) VideoAnalyticsJobLister {
	return &videoAnalyticsJobLister{indexer: indexer}
}

// List lists all VideoAnalyticsJobs in the indexer.
func (s *videoAnalyticsJobLister) List(selector labels.Selector) (ret []*v1alpha1.VideoAnalyticsJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VideoAnalyticsJob))
	})
	return ret, err
}

// VideoAnalyticsJobs returns an object that can list and get VideoAnalyticsJobs.
func (s *videoAnalyticsJobLister) VideoAnalyticsJobs(namespace string) VideoAnalyticsJobNamespaceLister {
	return videoAnalyticsJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VideoAnalyticsJobNamespaceLister helps list and get VideoAnalyticsJobs.
// All objects returned here must be treated as read-only.
type VideoAnalyticsJobNamespaceLister interface {
	// List lists all VideoAnalyticsJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VideoAnalyticsJob, err error)
	// Get retrieves the VideoAnalyticsJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VideoAnalyticsJob, error)
	VideoAnalyticsJobNamespaceListerExpansion
}

// videoAnalyticsJobNamespaceLister implements the VideoAnalyticsJobNamespaceLister
// interface.
type videoAnalyticsJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VideoAnalyticsJobs in the indexer for a given namespace.
func (s videoAnalyticsJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VideoAnalyticsJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VideoAnalyticsJob))
	})
	return ret, err
}

// Get retrieves the VideoAnalyticsJob from the indexer for a given namespace and name.
func (s videoAnalyticsJobNamespaceLister) Get(name string) (*v1alpha1.VideoAnalyticsJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("videoanalyticsjob"), name)
	}
	return obj.(*v1alpha1.VideoAnalyticsJob), nil
}
