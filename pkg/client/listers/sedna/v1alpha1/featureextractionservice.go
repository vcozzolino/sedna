/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeatureExtractionServiceLister helps list FeatureExtractionServices.
// All objects returned here must be treated as read-only.
type FeatureExtractionServiceLister interface {
	// List lists all FeatureExtractionServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FeatureExtractionService, err error)
	// FeatureExtractionServices returns an object that can list and get FeatureExtractionServices.
	FeatureExtractionServices(namespace string) FeatureExtractionServiceNamespaceLister
	FeatureExtractionServiceListerExpansion
}

// featureExtractionServiceLister implements the FeatureExtractionServiceLister interface.
type featureExtractionServiceLister struct {
	indexer cache.Indexer
}

// NewFeatureExtractionServiceLister returns a new FeatureExtractionServiceLister.
func NewFeatureExtractionServiceLister(indexer cache.Indexer) FeatureExtractionServiceLister {
	return &featureExtractionServiceLister{indexer: indexer}
}

// List lists all FeatureExtractionServices in the indexer.
func (s *featureExtractionServiceLister) List(selector labels.Selector) (ret []*v1alpha1.FeatureExtractionService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FeatureExtractionService))
	})
	return ret, err
}

// FeatureExtractionServices returns an object that can list and get FeatureExtractionServices.
func (s *featureExtractionServiceLister) FeatureExtractionServices(namespace string) FeatureExtractionServiceNamespaceLister {
	return featureExtractionServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FeatureExtractionServiceNamespaceLister helps list and get FeatureExtractionServices.
// All objects returned here must be treated as read-only.
type FeatureExtractionServiceNamespaceLister interface {
	// List lists all FeatureExtractionServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FeatureExtractionService, err error)
	// Get retrieves the FeatureExtractionService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FeatureExtractionService, error)
	FeatureExtractionServiceNamespaceListerExpansion
}

// featureExtractionServiceNamespaceLister implements the FeatureExtractionServiceNamespaceLister
// interface.
type featureExtractionServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FeatureExtractionServices in the indexer for a given namespace.
func (s featureExtractionServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FeatureExtractionService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FeatureExtractionService))
	})
	return ret, err
}

// Get retrieves the FeatureExtractionService from the indexer for a given namespace and name.
func (s featureExtractionServiceNamespaceLister) Get(name string) (*v1alpha1.FeatureExtractionService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("featureextractionservice"), name)
	}
	return obj.(*v1alpha1.FeatureExtractionService), nil
}
